buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'kotlin'

group = 'com.scientianova.versatile'
archivesBaseName = 'versatile'
version = "$mcVersion-$modVersion"

if (System.getenv('BUILD_NUMBER') != null) {
    version += ".${System.getenv('BUILD_NUMBER')}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = '1.8'

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'snapshot', version: '20200504-1.15.1'

    accessTransformer = file('src/main/resources/META-INF/versatile_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                versatile {
                    source sourceSets.main
                }
            }
        }

        testClient {
            parent runs.client

            mods {
                versatiletest {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                versatile {
                    source sourceSets.main
                }
            }
        }

        testServer {
            parent runs.server

            mods {
                versatiletest {
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'versatile', '--all', '--output', file('src/generated/resources/')
            mods {
                versatile {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mcVersion-$forgeVersion"
    compile "kottle:Kottle:$kottleVersion"
    compile "com.scientianova.palm:Palm:$palmVersion"
    compileOnly fg.deobf("mezz.jei:jei-$mcVersion:$jeiVersion:api")
    compile fg.deobf("mezz.jei:jei-$mcVersion:$jeiVersion")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Versatile",
                "Specification-Vendor"    : "ScientiaNova",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "$version",
                "Implementation-Vendor"   : "ScientiaNova",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier = ''

    dependencies {
        include(dependency("com.scientianova.palm:Palm:$palmVersion"))
    }
}

tasks.build.dependsOn shadowJar

def reobfFile = file("$buildDir/reobfJar/output.jar")

def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf"
}

artifacts {
    archives srcJar
    archives javadocJar
    archives deobfJar
}

publishing {
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifacts = [srcJar, javadocJar, deobfJar]
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies)
            }
        }
    }
}